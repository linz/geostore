name: Pull request
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  linter:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python: ['3.8']

    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # this is to enable gitlint to check all PR commit messages
          submodules: 'true'

      - name: Use Python ${{ matrix.python }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip
        uses: actions/cache@v2.1.6
        with:
          path: ~/.cache/pip
          key:
            ${{ runner.os }}-pip-${{ secrets.CACHE_SEED }}-${{ matrix.python }}-${{
            hashFiles('./poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ secrets.CACHE_SEED }}-${{ matrix.python }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          python -m poetry install \
              --extras='cdk check_files_checksums check_stac_metadata content_iterator datasets dataset_versions import_dataset import_status populate_catalog update_dataset_catalog validation_summary'

      - name: Check all commit messages in Pull Request
        run: >
          poetry run gitlint --commits origin/${{ github.base_ref }}..${{
          github.event.pull_request.head.sha }}

      - name: Run pre-commit hooks
        run: |
          poetry run pre-commit run --all-files

  test:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python: ['3.8']

    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Use Node.js for CDK deployment
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 14
          registry-url: https://registry.npmjs.org

      - name: Cache Node.js packages
        uses: actions/cache@v2.1.6
        with:
          path: ~/.npm
          key:
            ${{ runner.os }}-node-${{ secrets.CACHE_SEED }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ secrets.CACHE_SEED }}-

      - name: Install Node.js dependencies
        run: npm ci --production

      - name: Add local Node packages to PATH
        run: echo "./node_modules/.bin:$PATH" >> $GITHUB_PATH

      - name: Use Python ${{ matrix.python }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip
        uses: actions/cache@v2.1.6
        with:
          path: ~/.cache/pip
          key:
            ${{ runner.os }}-pip-${{ secrets.CACHE_SEED }}-${{ matrix.python }}-${{
            hashFiles('./poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ secrets.CACHE_SEED }}-${{ matrix.python }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          python -m poetry install \
              --extras='cdk check_files_checksums check_stac_metadata content_iterator datasets dataset_versions import_dataset import_status populate_catalog update_dataset_catalog validation_summary'

      - name: Print CDK version
        run: poetry run cdk --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.5.10
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_CI }}

      - name: Set unique deployment environment type variable
        run: |
          GEOSTORE_ENV_NAME="ci${GITHUB_RUN_ID}"
          echo "GEOSTORE_ENV_NAME=$GEOSTORE_ENV_NAME" | tee -a $GITHUB_ENV

      - name: Deploy AWS stacks for testing
        run: |
          poetry run cdk bootstrap --strict aws://unknown-account/ap-southeast-2
          poetry run cdk deploy --all --require-approval never --strict --change-set-name ${GITHUB_RUN_ID}"

      - name: Run non-infrastructure tests offline
        run: >
          poetry run coverage run --module pytest --disable-socket -m 'not infrastructure'
          "--randomly-seed=${GITHUB_RUN_ID}" --verbosity=2 tests

      - name: Run infrastructure tests online
        run: >
          poetry run coverage run --append --module pytest -m infrastructure
          "--randomly-seed=${GITHUB_RUN_ID}" --verbosity=2 tests

      - name: Verify test coverage
        run: |
          poetry run coverage html

      - name: Archive code coverage report
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: htmlcov
        if: ${{ failure() }}

      - name: Destroy AWS stacks used for testing
        run: |
          poetry run cdk destroy --force --all
        if: always() # clean-up AWS stack after failure
