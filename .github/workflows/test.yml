name: Pull request
on:
  pull_request:
    types: [opened, reopened, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  linter:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.2.0
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0 # this is to enable gitlint to check all PR commit messages
          submodules: 'true'

      - id: python-version
        run: echo "::set-output name=id::$(cat .python-version)"

      - name: Use Python ${{ steps.python-version.outputs.id }}
        uses: actions/setup-python@v4.3.1
        with:
          python-version: ${{ steps.python-version.outputs.id }}

      - name: Cache pip
        uses: actions/cache@v3.0.11
        with:
          path: ~/.cache/pip
          key:
            ${{ runner.os }}-pip-${{ secrets.CACHE_SEED }}-${{ steps.python-version.outputs.id
            }}-${{ hashFiles('./poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ secrets.CACHE_SEED }}-${{ steps.python-version.outputs.id }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --requirement=geostore/pip.txt
          python -m pip install --requirement=geostore/poetry.txt
          python -m poetry install \
              --extras="$(sed --quiet '/\[tool\.poetry\.extras\]/,/^\[/{s/^\(.*\) = \[/\1/p}' pyproject.toml | sed --null-data 's/\n/ /g;s/ $//')" \
              --no-root

      - name: Check all commit messages in Pull Request
        run: >
          poetry run gitlint --commits origin/${{ github.base_ref }}..${{
          github.event.pull_request.head.sha }}

      - name: Run pre-commit hooks
        run: |
          poetry run pre-commit run --all-files

  test:
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.2.0
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: 'true'

      - id: node-version
        run: echo "::set-output name=id::$(cat .nvmrc)"

      - id: python-version
        run: echo "::set-output name=id::$(cat .python-version)"

      - name: Use Node.js ${{ steps.node-version.outputs.id }}
        uses: actions/setup-node@v3.5.1
        with:
          node-version: ${{ steps.node-version.outputs.id }}
          registry-url: https://registry.npmjs.org

      - name: Cache Node.js packages
        uses: actions/cache@v3.0.11
        with:
          path: ~/.npm
          key:
            ${{ runner.os }}-node-${{ secrets.CACHE_SEED }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ secrets.CACHE_SEED }}-

      - name: Install Node.js dependencies
        run: npm ci --production

      - name: Add local Node packages to PATH
        run: echo "./node_modules/.bin:$PATH" >> $GITHUB_PATH

      - name: Use Python ${{ steps.python-version.outputs.id }}
        uses: actions/setup-python@v4.3.1
        with:
          python-version: ${{ steps.python-version.outputs.id }}

      - name: Cache pip
        uses: actions/cache@v3.0.11
        with:
          path: ~/.cache/pip
          key:
            ${{ runner.os }}-pip-${{ secrets.CACHE_SEED }}-${{ steps.python-version.outputs.id
            }}-${{ hashFiles('./poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ secrets.CACHE_SEED }}-${{ steps.python-version.outputs.id }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --requirement=geostore/pip.txt
          python -m pip install --requirement=geostore/poetry.txt
          python -m poetry install \
              --extras="$(sed --quiet '/\[tool\.poetry\.extras\]/,/^\[/{s/^\(.*\) = \[/\1/p}' pyproject.toml | sed --null-data 's/\n/ /g;s/ $//')" \
              --no-root

      - name: Print CDK version
        run: poetry run cdk --version

      - name: Get Oidc deploy role arn
        run: cat .github/workflows/.env >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          mask-aws-account-id: true
          role-to-assume: ${{ env.CiOidc }}

      - name: Set unique deployment environment type variable
        run: |
          GEOSTORE_ENV_NAME="ci${GITHUB_RUN_ID}"
          echo "GEOSTORE_ENV_NAME=$GEOSTORE_ENV_NAME" | tee -a $GITHUB_ENV

      - name: Deploy AWS stacks for testing
        run: |
          poetry run cdk deploy --all --require-approval never --strict --change-set-name "ci-${GITHUB_RUN_ID}"

      - name: Run non-infrastructure tests offline
        run: >
          poetry run coverage run --module pytest --disable-socket -m 'not infrastructure'
          "--randomly-seed=${GITHUB_RUN_ID}" --verbosity=2

      - name: Run infrastructure tests online
        run: >
          poetry run coverage run --append --module pytest -m 'infrastructure' --junitxml=junit.xml
          "--randomly-seed=${GITHUB_RUN_ID}" --verbosity=2

      - name: Archive JUnit test report
        uses: actions/upload-artifact@v3.1.1
        with:
          name: test-report
          path: junit.xml
        if: always()

      - name: Verify test coverage
        run: |
          poetry run coverage html

      - name: Archive code coverage report
        uses: actions/upload-artifact@v3.1.1
        with:
          name: code-coverage-report
          path: htmlcov
        if: always()

      - name: Empty S3 buckets only when tests fail
        run:
          yes | ./clear-s3-buckets.bash ${GEOSTORE_ENV_NAME}-linz-geostore
          ${GEOSTORE_ENV_NAME}-linz-geostore-staging
        if: failure()

      - name: Destroy AWS stacks used for testing
        run: |
          aws cloudformation delete-stack --stack-name ci${GITHUB_RUN_ID}-geostore
        if: always()

      - name: Delete CloudWatch Log Groups over a week old
        run: |
          aws logs describe-log-groups --log-group-name-prefix='/aws/lambda/ci' --output=text --no-paginate | \
          awk -v date="$(($(date --date='1 week ago' +%s)*1000))" '{ if ($3 < date) print $4}' | \
          xargs --no-run-if-empty --verbose -I{} aws logs delete-log-group --log-group-name={} || \
          [[ $? -eq 123 ]]
        if: always()

  build-nix-shell:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3.2.0
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: cachix/install-nix-action@v18
      - uses: cachix/cachix-action@v12
        with:
          name: linz
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - run: nix-shell --pure --run 'black --version'
