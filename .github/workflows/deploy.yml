name: Deployment to NonProd/Prod
on:
  push:
    branches:
      - master
      - release-*
    tags:
      - release-*

jobs:
  deploy:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Get configuration
        run: |
          echo "NODE_VERSION=$(cat .nvmrc)" | tee -a $GITHUB_ENV
          echo "PYTHON_VERSION=$(cat .python-version)" | tee -a $GITHUB_ENV

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: https://registry.npmjs.org

      - name: Cache Node.js packages
        uses: actions/cache@v2.1.6
        with:
          path: ~/.npm
          key:
            ${{ runner.os }}-node-${{ secrets.CACHE_SEED }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ secrets.CACHE_SEED }}-

      - name: Install Node.js dependencies
        run: npm ci --production

      - name: Add local Node packages to PATH
        run: echo "./node_modules/.bin:$PATH" >> $GITHUB_PATH

      - name: Use Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v2.1.6
        with:
          path: ~/.cache/pip
          key:
            ${{ runner.os }}-pip-${{ secrets.CACHE_SEED }}-${{ env.PYTHON_VERSION }}-${{
            hashFiles('./poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ secrets.CACHE_SEED }}-${{ env.PYTHON_VERSION }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          python -m poetry install \
              --extras="$(sed --quiet '/\[tool\.poetry\.extras\]/,/^\[/{s/^\(.*\) = \[/\1/p}' pyproject.toml | sed --null-data 's/\n/ /g;s/ $//')" \
              --no-dev --no-root

      - name: Print CDK version
        run: poetry run cdk --version

      # NONPROD DEPLOYMENT - deploy all changes in master branch
      - name: (NonProd) Configure AWS credentials
        if: github.repository == 'linz/geostore' && github.ref == 'refs/heads/master'
        uses: aws-actions/configure-aws-credentials@v1.5.11
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_NON_PROD }}

      - name: (NonProd) Deploy AWS stacks
        if: github.repository == 'linz/geostore' && github.ref == 'refs/heads/master'
        run: |
          poetry run cdk deploy --all --require-approval never --change-set-name "ci-${GITHUB_RUN_ID}"
        env:
          GEOSTORE_ENV_NAME: nonprod
          GEOSTORE_SAML_IDENTITY_PROVIDER_ARN:
            ${{ secrets.GEOSTORE_SAML_IDENTITY_PROVIDER_ARN_NON_PROD }}
          RESOURCE_REMOVAL_POLICY: RETAIN

      # PROD DEPLOYMENT - in release branch, deploy on tag, otherwise report stack changes only
      - name: (Prod) Configure AWS credentials
        if: >
          github.repository == 'linz/geostore' && (startsWith(github.ref, 'refs/heads/release-') ||
          startsWith(github.ref, 'refs/tags/release-'))
        uses: aws-actions/configure-aws-credentials@v1.5.11
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_PROD }}

      - name: (Prod) Report AWS stack changes before deployment
        if: >
          github.repository == 'linz/geostore' && (startsWith(github.ref, 'refs/heads/release-') ||
          startsWith(github.ref, 'refs/tags/release-'))
        run: |
          poetry run cdk diff -c aws-cdk:enableDiffNoFail=true
        env:
          GEOSTORE_ENV_NAME: prod
          GEOSTORE_SAML_IDENTITY_PROVIDER_ARN:
            ${{ secrets.GEOSTORE_SAML_IDENTITY_PROVIDER_ARN_PROD }}
          GEOSTORE_SLACK_NOTIFY_URL: ${{ secrets.GEOSTORE_SLACK_NOTIFY_URL }}

      - name: (Prod) Deploy AWS stacks (only on release tag)
        if: github.repository == 'linz/geostore' && startsWith(github.ref, 'refs/tags/release-')
        run:
          poetry run cdk deploy --all --require-approval never --change-set-name
          "ci-${GITHUB_RUN_ID}"
        env:
          GEOSTORE_ENV_NAME: prod
          GEOSTORE_SAML_IDENTITY_PROVIDER_ARN:
            ${{ secrets.GEOSTORE_SAML_IDENTITY_PROVIDER_ARN_PROD }}
          RESOURCE_REMOVAL_POLICY: RETAIN
