on:
  workflow_dispatch:

jobs:
  mutation-test:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - id: node-version
        run: echo "::set-output name=id::$(cat .nvmrc)"

      - id: python-version
        run: echo "::set-output name=id::$(cat .python-version)"

      - name: Use Node.js ${{ steps.node-version.outputs.id }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ steps.node-version.outputs.id }}
          registry-url: https://registry.npmjs.org

      - name: Cache Node.js packages
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key:
            ${{ runner.os }}-node-${{ secrets.CACHE_SEED }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-${{ secrets.CACHE_SEED }}-

      - name: Install Node.js dependencies
        run: npm ci --production

      - name: Add local Node packages to PATH
        run: echo "./node_modules/.bin:$PATH" >> $GITHUB_PATH

      - name: Use Python ${{ steps.python-version.outputs.id }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ steps.python-version.outputs.id }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key:
            ${{ runner.os }}-pip-${{ secrets.CACHE_SEED }}-${{ steps.python-version.outputs.id
            }}-${{ hashFiles('./poetry.lock') }}
          restore-keys:
            ${{ runner.os }}-pip-${{ secrets.CACHE_SEED }}-${{ steps.python-version.outputs.id }}-

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install Poetry
        run: python -m pip install poetry

      - name: Install Python dependencies
        run:
          python -m poetry install --extras="$(sed --quiet
          '/\[tool\.poetry\.extras\]/,/^\[/{s/^\(.*\) = \[/\1/p}' pyproject.toml | sed --null-data
          's/\n/ /g;s/ $//')" --no-root

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_CI }}

      - name: Set unique deployment environment type variable
        run: echo "GEOSTORE_ENV_NAME=ci${GITHUB_RUN_ID}" | tee -a $GITHUB_ENV

      - name: Deploy AWS stacks for testing
        run:
          poetry run cdk deploy --all --require-approval never --strict --change-set-name
          "ci-${GITHUB_RUN_ID}"

      - run: poetry run mutmut run
      - run: poetry run mutmut junitxml > mutmut.xml
        if: failure()
      - uses: actions/upload-artifact@v3
        with:
          name: mutation-test-report
          path: mutmut.xml
        if: failure()
      - uses: mikepenz/action-junit-report@v3.0.3
        if: failure()
        with:
          report_paths: mutmut.xml

      - name: Destroy AWS stacks used for testing
        run: poetry run cdk destroy --force --all
        if: always() # clean-up AWS stack after failure
