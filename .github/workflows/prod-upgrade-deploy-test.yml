name: Deployment Test
on:
  pull_request:
    types: [labeled, synchronize]

jobs:
  test-prod-upgrade:
    if:
      startsWith(github.ref, 'refs/heads/release-') || startsWith(github.ref, 'refs/tags/release-')
      || github.event.label.name == 'automerge' || contains(github.event.*.labels.*.name,
      'automerge')
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          submodules: true

      # prod version detection
      - name: Configure production AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_PROD }}

      - name: Get current production environment version
        run: |
          echo "PROD_VERSION=$(aws ssm get-parameter --name /prod/version --query Parameter.Value --output text || true)" | tee -a $GITHUB_ENV

      - name: Checkout to current production version
        uses: actions/checkout@v3
        with:
          ref: ${{ env.PROD_VERSION }}
          clean: false
          submodules: true

      # TODO: Remove `|| [â€¦]` once this code is in production
      - name: Get production configuration
        run: |
          echo "PROD_NODE_VERSION=$(cat .nvmrc || echo 14)" | tee -a $GITHUB_ENV
          echo "PROD_PYTHON_VERSION=$(cat .python-version)" | tee -a $GITHUB_ENV

      # dependencies installation
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.PROD_NODE_VERSION }}
          registry-url: https://registry.npmjs.org

      - name: Cache Node.js packages
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key:
            ${{ runner.os }}-node-${{ env.PROD_NODE_VERSION }}-${{ secrets.CACHE_SEED }}-${{
            hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.PROD_NODE_VERSION }}-${{ secrets.CACHE_SEED }}-

      - name: Install Node.js dependencies
        run: npm ci --production

      - name: Add local Node packages to PATH
        run: echo "./node_modules/.bin:$PATH" >> $GITHUB_PATH

      - name: Use Python ${{ env.PROD_PYTHON_VERSION }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PROD_PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key:
            ${{ runner.os }}-pip-${{ env.PROD_PYTHON_VERSION }}-${{ secrets.CACHE_SEED }}-${{
            hashFiles('./poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PROD_PYTHON_VERSION }}-${{ secrets.CACHE_SEED }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          python -m poetry install \
              --extras="$(sed --quiet '/\[tool\.poetry\.extras\]/,/^\[/{s/^\(.*\) = \[/\1/p}' pyproject.toml | sed --null-data 's/\n/ /g;s/ $//')" \
              --no-dev --no-root

      - name: Print CDK version
        run: poetry run cdk --version

      # deployment
      - name: Configure CI AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_CI }}

      - name: Set unique deployment environment type variable
        run: |
          GEOSTORE_ENV_NAME="ci${GITHUB_RUN_ID}"
          echo "GEOSTORE_ENV_NAME=$GEOSTORE_ENV_NAME" | tee -a $GITHUB_ENV

      - name: Deploy copy of production AWS stacks in to CI environment
        run: |
          poetry run cdk deploy --all --require-approval never --change-set-name "ci-${GITHUB_RUN_ID}"

      - name: Checkout to current pull request version
        uses: actions/checkout@v3
        with:
          ref: ${{ env.GITHUB_SHA }}
          clean: false
          submodules: true

      - name: Get HEAD configuration
        run: |
          echo "HEAD_NODE_VERSION=$(cat .nvmrc)" | tee -a $GITHUB_ENV
          echo "HEAD_PYTHON_VERSION=$(cat .python-version)" | tee -a $GITHUB_ENV

      # dependencies installation
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.HEAD_NODE_VERSION }}
          registry-url: https://registry.npmjs.org

      - name: Cache Node.js packages
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key:
            ${{ runner.os }}-node-${{ env.HEAD_NODE_VERSION }}-${{ secrets.CACHE_SEED }}-${{
            hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.HEAD_NODE_VERSION }}-${{ secrets.CACHE_SEED }}-

      - name: Install Node.js dependencies
        run: npm ci --production

      - name: Add local Node packages to PATH
        run: echo "./node_modules/.bin:$PATH" >> $GITHUB_PATH

      - name: Use Python ${{ env.HEAD_PYTHON_VERSION }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.HEAD_PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key:
            ${{ runner.os }}-pip-${{ env.HEAD_PYTHON_VERSION }}-${{ secrets.CACHE_SEED }}-${{
            hashFiles('./poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.HEAD_PYTHON_VERSION }}-${{ secrets.CACHE_SEED }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          python -m poetry install \
              --extras="$(sed --quiet '/\[tool\.poetry\.extras\]/,/^\[/{s/^\(.*\) = \[/\1/p}' pyproject.toml | sed --null-data 's/\n/ /g;s/ $//')" \
              --no-dev --no-root --remove-untracked

      # TODO: Remove once this code is in production
      - name: Remove duplicate s3 role resource
        run: aws iam delete-role --role-name="${GEOSTORE_ENV_NAME}-s3-users"

      # deployment
      - name: Upgrade copy of production AWS stacks in CI environment
        run: |
          poetry run cdk deploy --all --require-approval never --change-set-name "ci-${GITHUB_RUN_ID}"

      - name: Destroy AWS stacks used for production upgrade testing
        run: |
          poetry run cdk destroy --force --all
        if: always() # clean-up AWS stack after failure
