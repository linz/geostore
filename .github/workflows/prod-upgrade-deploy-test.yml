name: Deployment Test
on:
  pull_request:
    types: [labeled, synchronize]

jobs:
  test-prod-upgrade:
    if:
      startsWith(github.ref, 'refs/heads/release-') || startsWith(github.ref, 'refs/tags/release-')
      || github.event.label.name == 'automerge' || contains(github.event.*.labels.*.name,
      'automerge')
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python: ['3.8']

    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          submodules: 'true'
          fetch-depth: 0

      # prod version detection
      - name: Configure production AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.5.9
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_PROD }}

      - name: Get current production environment version
        run: |
          echo "PROD_VERSION=$(aws ssm get-parameter --name /prod/version --query Parameter.Value --output text || true)" | tee -a $GITHUB_ENV

      - name: Checkout to current production version
        run: git checkout ${{ env.PROD_VERSION }}

      # dependencies installation
      - name: Use Node for CDK deployment
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 14
          registry-url: https://registry.npmjs.org

      - name: Cache Node.js packages
        uses: actions/cache@v2.1.5
        with:
          path: ~/.npm
          key:
            ${{ runner.os }}-node-${{ secrets.CACHE_SEED }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ secrets.CACHE_SEED }}-

      - name: Install Node.js dependencies
        run: npm ci --production

      - name: Add local Node packages to PATH
        run: echo "./node_modules/.bin:$PATH" >> $GITHUB_PATH

      - name: Use Python ${{ matrix.python }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip
        uses: actions/cache@v2.1.5
        with:
          path: ~/.cache/pip
          key:
            ${{ runner.os }}-pip-${{ secrets.CACHE_SEED }}-${{ matrix.python }}-${{
            hashFiles('./poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ secrets.CACHE_SEED }}-${{ matrix.python }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          python -m poetry install \
              --extras='cdk check_files_checksums check_stac_metadata content_iterator datasets dataset_versions import_dataset import_status validation_summary'

      - name: Print CDK version
        run: poetry run cdk --version

      # deployment
      - name: Configure CI AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.5.9
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_CI }}

      - name: Set unique deployment environment type variable
        run: |
          DEPLOY_ENV="ci${GITHUB_RUN_ID}"
          echo "DEPLOY_ENV=$DEPLOY_ENV" | tee -a $GITHUB_ENV

      - name: Deploy copy of production AWS stacks in to CI environment
        run: |
          poetry run cdk bootstrap aws://unknown-account/ap-southeast-2
          poetry run cdk deploy --all --require-approval never

      # checkout the branch
      - name: Checkout to current pull request version
        run: git checkout ${{ env.GITHUB_SHA }}

      # dependencies installation
      - name: Install Node.js dependencies
        run: npm ci --production

      - name: Add local Node packages to PATH
        run: echo "./node_modules/.bin:$PATH" >> $GITHUB_PATH

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          python -m poetry install \
              --extras='cdk check_files_checksums check_stac_metadata content_iterator datasets dataset_versions import_dataset import_status validation_summary' \
              --remove-untracked

      # deployment
      - name: Upgrade copy of production AWS stacks in CI environment
        run: |
          poetry run cdk deploy --all --require-approval never

      - name: Destroy AWS stacks used for production upgrade testing
        run: |
          poetry run cdk destroy --force --all
        if: always() # clean-up AWS stack after failure
